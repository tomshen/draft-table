// Generated by CoffeeScript 1.6.3
(function() {
  var Plan, Proposal, School, Supporter, addChildOfTypeById, createDocWithParent, db, log, methods, mongo, pluralize, update, updateByPush, _;

  mongo = require('mongoskin', _ = require('underscore', log = console.log));

  db = mongo.db('localhost:27017/test', {
    w: 0
  });

  pluralize = function(word) {
    return word + 's';
  };

  createDocWithParent = function(type, parent_id, doc, collectionName, parentCollectionName, callback) {
    return db.collection(collectionName).insert(doc, function(err, docs) {
      var doc_id, doc_ids;
      doc_ids = _.pluck(docs, '_id');
      doc_id = doc_ids[0];
      return addChildOfTypeById(type, parentCollectionName, parent_id, doc_id, function() {
        return callback(doc_id);
      });
    });
  };

  update = function(collectionName, _id, update_object, callback) {
    return db.collection(collectionName).updateById(_id, update_object, callback);
  };

  addChildOfTypeById = function(type, parentCollectionName, parent_id, doc_id, callback) {
    return db.collection(parentCollectionName).findById(parent_id, function(err, doc) {
      var child_array, fieldName, update_obj;
      fieldName = pluralize(type);
      child_array = doc[fieldName];
      child_array.push(doc_id);
      update_obj = {};
      update_obj[fieldName] = child_array;
      return update(parentCollectionName, parent_id, {
        $set: update_obj
      }, callback);
    });
  };

  updateByPush = function(_id, listElt, listName, collectionName) {
    var push_me, update_object;
    push_me = {};
    push_me[listName] = listElt;
    update_object = {
      $push: push_me
    };
    return db.collection(collectionName).updateById(_id, update_object);
  };

  School = {};

  School.create = function(school, callback) {
    if (!((school.name != null) && (school.email_domain != null))) {
      throw new Error('School.create: name or email domain was undefined');
    }
    return db.collection('schools').insert(school, function(err, docs) {
      return callback(docs[0]._id);
    });
  };

  School.update = function(_id, update_object) {
    return db.collection('schools').updateById(_id, {
      $set: update_object
    });
  };

  School.get = function(school_id, callback) {
    return db.collection('schools').findById(school_id, callback);
  };

  School.addPlan = function(school_id, plan, callback) {
    return createDocWithParent('plan', school_id, plan, 'plans', 'schools', callback);
  };

  Plan = {};

  Plan.addProposal = function(plan_id, proposal, callback) {
    return createDocWithParent('proposal', plan_id, proposal, 'proposals', 'plans', callback);
  };

  Plan.get = function(plan_id, callback) {
    return db.collection('plans').findById(plan_id, callback);
  };

  Plan.update = function(_id, update_object) {
    return db.collection('plans').updateById(_id, {
      $set: update_object
    });
  };

  Plan.addSupporter = function(plan_id, supporter) {
    return updateByPush(plan_id, supporter, 'supporters', 'plans');
  };

  Plan.addElement = function(plan_id, element) {
    return updateByPush(plan_id, element, 'elements', 'plans');
  };

  Proposal = {};

  Proposal.get = function(proposal_id, callback) {
    return db.collection('proposals').findById(proposal_id, callback);
  };

  Proposal.addSupporter = function(proposal_id, supporter) {};

  Proposal.addElement = function(proposal_id, element) {};

  Proposal.addComment = function(proposal_id, comment) {};

  Supporter = {};

  Supporter.create = function(parent_id, supporter, parentType, callback) {
    var parentObj;
    parentObj = (function() {
      if (parentType === 'plan') {
        return Plan;
      } else if (parentType === 'proposal') {
        return Proposal;
      } else {
        throw new Error('supporter: illegal parent type' + parentType);
      }
    })();
    return db.collection('supporters').insert(supporter, function(err, docs) {
      var supporters;
      supporters = _.pluck(docs, '_id');
      parentObj.addSupporterById(parent_id, supporters[0]);
      return callback(supporters[0]);
    });
  };

  methods = {
    School: School,
    Plan: Plan,
    Proposal: Proposal
  };

  module.exports = methods;

}).call(this);
